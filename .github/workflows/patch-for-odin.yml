name: Patch images and build Odin tar.md5

on:
  push:
    paths:
      - 'input/**'
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install tools
      run: |
        sudo apt update
        sudo apt install -y python3 zip unzip make device-tree-compiler coreutils
        git clone https://android.googlesource.com/platform/external/avb
        git clone https://github.com/topjohnwu/magiskboot.git
        cd magiskboot && make && cd ..

    - name: Create output folder
      run: mkdir -p output

    - name: Patch vbmeta.img
      if: ${{ hashFiles('input/vbmeta.img') != '' }}
      run: |
        python3 external/avb/avbtool.py make_vbmeta_image \
          --output output/vbmeta_patched.img \
          --disable_verity \
          --disable_verification

    - name: Patch vbmeta_system.img
      if: ${{ hashFiles('input/vbmeta_system.img') != '' }}
      run: |
        python3 external/avb/avbtool.py make_vbmeta_image \
          --output output/vbmeta_system_patched.img \
          --disable_verity \
          --disable_verification

    - name: Patch dtbo.img
      if: ${{ hashFiles('input/dtbo.img') != '' }}
      run: |
        dtc -I dtb -O dts -o extracted.dts input/dtbo.img
        sed -i 's/status = "okay"/status = "disabled"/g' extracted.dts || true
        sed -i 's/enabled = "true"/enabled = "false"/g' extracted.dts || true
        dtc -I dts -O dtb -o output/dtbo_patched.img extracted.dts

    - name: Build Odin tar.md5 files
      run: |
        cd output
        for img in *.img; do
          base=$(basename "$img" .img)
          tar -H ustar -c "$img" > "${base}.tar"
          md5sum "${base}.tar" | awk '{print $1}' > "${base}.tar.md5"
          cat "${base}.tar" >> "${base}.tar.md5"
        done

    - name: Upload Odin tar.md5 files
      uses: actions/upload-artifact@v4
      with:
        name: odin-flashable
        path: output/*.tar.md5
